import cube             from 'cube-js';

import Q                from 'q';
import log              from 'loglevel';
import S                from 'sprintf-js';

import jquery           from 'jquery'

import WeChat           from './wechat'
import ga               from 'ut/ga-agent';
import i18n             from 'chrome/i18n'
import { runtime }      from './config'
import {LocalCache, PrefixLocalCache} from 'chrome/local-cache'

window.$ = jquery;
log.setLevel('trace');

var Controller = function() {

  this.blackList = {};
  this.deleteList = {};

  this.lastUserName = null,
  this.tempChatRoomName = null;

  this.tempContactList = [];
  this.localCache = null;
};

cube.mix(Controller.prototype, {

  blackList: {},
  deleteList: {},

  lastUserName: null,
  tempChatRoomName: null,

  roundTime: 1,
  tempContactList: [],
  localCache: null,

  loadLastData: function(done) {
    var me = this;
    this.localCache.get('last_data', function(data) {
      log.debug('loadLastData', data);
      cube.mix(me, data);
      done();
    });
  },

  flushLastData: function() {
    var data = {
      blackList: this.blackList,
      deleteList: this.deleteList,
      lastUserName: this.lastUserName,
      tempChatRoomName: this.tempChatRoomName,
    }
    log.debug('flushLastData', data);
    this.localCache.set('last_data', data);
  },

  start: function() {
    this.checkInit();
  },

  checkInit: function(done) {

    log.info('checkInit');
    cube.fire('message', 'info', i18n['doc_check_init_start'])

    this.wechat = new WeChat();

    var me = this;
    this.wechat.init(function(e){

      log.info('checkInit done');
      cube.fire('message', 'info', i18n['doc_check_init_done'])
      me.has_init = true;

      var userName = me.wechat.userInfo['UserName'];
      me.localCache = new PrefixLocalCache(userName);
      done();
    });
  },

  checkFriend: function() {
    log.info('checkFriend');
    var me = this;

    if (!this.has_init) {
      log.info('not login, login first');
      this.checkInit(function() {
        me.checkFriend();
      });
      return;
    }

    cube.fire('message', 'info', i18n['doc_get_contact_list'])

    this.wechat.getContactList(function() {
      log.info('getContactList done');
      me.loadLastData(function() {
        log.debug('loadLastData resolve');
        me.divideListByGroup();
        me.processMemberListGroup();
      });
    });
  },

  divideListByGroup: function() {
    var rawList = cube.Array.toArray(this.wechat.contactList);
    rawList = cube.sortBy(rawList, function(item, key) {
      return item['UserName'];
    });

    var friendAmount = rawList.length;
    ga('send', 'event', 'friend_num', 'stat', 'friend_num', friendAmount);

    if (this.lastUserName) {
      for (var i = 0; i < friendAmount; i++) {
        if (rawList[i]['UserName'] == this.lastUserName) {
          var skip = i + 1;
          rawList = rawList.slice(skip);
          var msg = S.sprintf(i18n['doc_resume_from_last'], skip);
          cube.fire('message', 'info', msg);
          break;
        }
      }
    }

    var num_per_group = 35;
    var listGroup = cube.Array.chunk(rawList, num_per_group);
    this.listGroup = listGroup;

    var msg = S.sprintf(i18n['doc_split_group'], friendAmount, listGroup.length, num_per_group);
    cube.fire('message', 'info', msg);
    if (friendAmount > 500) {
      cube.fire('message', 'info', i18n['doc_many_friend_warning']);
    }
  },

  finishWork: function() {

    this.displayBadList(this.deleteList, this.blackList);

    this.roundTime = 1;
    this.lastUserName = null;
    this.tempChatRoomName = null;
    this.flushLastData();
  },

  displayBadList: function(deleteList, blackList) {

    deleteList = cube.keys(deleteList);
    blackList = cube.keys(blackList);

    var contactList = this.wechat.contactList;

    var toArray = function(list) {

      var len = list.length;
      var nameList = [];

      for (var i = 0; i < len; i++) {
        var userName = list[i];
        if (!contactList[userName]) {
          continue;
        }

        var item = contactList[userName];
        if (item['RemarkName']) {
          nameList.push(item['RemarkName']);
        } else {
          nameList.push(item['NickName']);
        }
      }
      return nameList.join(', ');
    };

    if (deleteList.length) {
      cube.fire('message', 'danger', S.sprintf(i18n['doc_delete_list_tip'], toArray(deleteList)));
    }
    if (blackList.length) {
      cube.fire('message', 'danger', S.sprintf(i18n['doc_black_list_tip'], toArray(blackList)));
    }
    if (deleteList.length == 0 && blackList.length == 0) {
      cube.fire('message', 'danger', i18n['doc_all_contact_ok']);
    }
  },

  processMemberListGroup: function(listGroup) {

    if (!this.listGroup.length) {
      cube.fire('message', 'info', i18n['doc_check_friend_done']);
      this.finishWork();
      return;
    }

    var userList = this.listGroup[0];
    this.tempContactList = userList;

    var nameList = [];
    for (var i = 0; i < userList.length; i++) {
      var item = userList[i];
      nameList.push(item['UserName']);
    }

    var msg = S.sprintf(i18n['doc_check_friend_round'], this.roundTime, runtime.time_limit * 2 / 1000);
    cube.fire('message', 'info', msg);

    var me = this;
    if (this.tempChatRoomName) {
      cube.fire('message', 'info', i18n['doc_try_add_member']);
      this.wechat.addMember(this.tempChatRoomName, nameList, function(e) {
        me.updateDeletedList(e);
        me.deleteMember(nameList);
      });
    } else {

      cube.fire('message', 'info', i18n['doc_try_add_member']);
      this.wechat.createChatRoom(nameList, function(e) {
        if (e.ChatRoomName) {
          me.tempChatRoomName = e.ChatRoomName;

          me.updateDeletedList(e);
          me.deleteMember(nameList);

        } else if (e.BlackList) {

          me.updateDeletedList(e);
          me.processMemberListGroup();

        } else {
          cube.fire('message', 'danger', i18n['create_chat_room_error'] + e.BaseResponse.ErrMsg);
        }
      });
    }
  },

  deleteMember: function(nameList) {
    var me = this;
    cube.fire('message', 'info', i18n['doc_try_remove_member']);
    me.wechat.deleteMember(me.tempChatRoomName, nameList, function(e) {
      me.processMemberListGroup();
    });
  },

  updateDeletedList: function(e) {

    this.roundTime++;
    this.listGroup.shift();

    // next time should resume after this user
    this.lastUserName = this.tempContactList[this.tempContactList.length - 1]['UserName'];
    var blackList = {};
    var deleteList = {};
    cube.forEach(e.MemberList, function(item) {
      var userName = item['UserName'];
      var status = item['MemberStatus'];
      if (status == 4) {
        deleteList[userName] = true;
      } else if (status == 3) {
        blackList[userName] = true;
      }
    });

    cube.mix(this.blackList, blackList);
    cube.mix(this.deleteList, deleteList);

    this.flushLastData();

    this.displayBadList(deleteList, blackList);
  },
});

module.exports = Controller;
