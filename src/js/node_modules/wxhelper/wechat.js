import cube             from 'cube-js';
import Q                from 'q';
import log              from 'loglevel';
import S                from 'sprintf-js';

import {
  SpecialUsers, runtime
}                       from 'wxhelper/config.js';
import tool             from 'from-wechat/tool.js';
import i18n             from 'chrome/i18n.js'
import {
  LocalCache,
  PrefixLocalCache
}                       from 'chrome/local-cache'

var WeChat = function() {
};

cube.mix(WeChat.prototype, {

  sid: '',
  uin: '',
  skey: '',
  userInfo: '',
  contactList: {},

  lang: '',

  getLang: function() {
    var lang = navigator.language || navigator.browserLanguage;
    lang || (lang = "zh-cn"),
    lang = lang.split("-"),
    lang = lang[0].toLowerCase() + "_" + (lang[1] || "").toUpperCase();
    return lang;
  },

  getBaseRequest: function() {
    return {
      BaseRequest: {
        Uin: this.getUin(),
        Sid: this.getSid(),
        Skey: this.getSkey(),
        DeviceID: this.getDeviceID()
      }
    }
  },

  getDeviceID: function() {
    return "e" + ("" + Math.random().toFixed(15)).substring(2, 17)
  },

  getSid: function() {
    return this.sid || (this.sid = tool.getCookie("wxsid"))
  },

  getUin: function() {
    return this.uin || (this.uin = tool.getCookie("wxuin"))
  },

  getSkey: function() {
    return this.skey || ""
  },

  setSkey: function(key) {
    this.skey = key;
  },

  init: function(done) {
    log.info('init');
    this.lang = this.getLang();
    var url = "/cgi-bin/mmwebwx-bin/webwxinit?r=" + ~new Date;
    var that = this;

    this._request(url, {}).then(function(e){
      that.setSkey(e.SKey);
      that.userInfo = e.User;
      done();
    }, function() {
      // TODO how to make sure is no login
      cube.fire('unlogin');
    });
  },

  getContactList: function(done) {
    log.info('getContactList', runtime);

    var url = "/cgi-bin/mmwebwx-bin/webwxgetcontact";
    var data = {
      skey: this.getSkey(),
      pass_ticket: '',
      r: Date.now()
    };

    var me = this;
    this._request(url, data, 'GET').then(function(e){
      me._updateContactList(e.MemberList);
      done();
    }, function(e) {
      cube.fire('message', 'danger', i18n['doc_get_contact_list_error'])
    });
  },

  _updateContactList: function(rawList) {

    log.info('_updateContactList');
    var me = this;
    var list = {};
    var map = {}
    cube.forEach(SpecialUsers, function(name) {
      map[name] = true;
    });

    var myName = me.userInfo['UserName'];
    var skipList = [];
    cube.forEach(rawList, function(item) {
      // 公众号/ 服务号
      if ((item['VerifyFlag'] & 8) != 0) {
        skipList.push(item['NickName']);
        return;
      }
      var userName = item['UserName'];
      if (userName.indexOf('@@') != -1 || userName == myName || map[userName]) {
        return;
      }

      list[userName] = item;
    });

    log.info('skip list: ' + skipList.join(', '));

    var contactNum = cube.Array.toArray(list).length;
    var msg = S.sprintf(i18n['doc_get_contact_list_done'], contactNum);
    cube.fire('message', 'info', msg)

    this.contactList = list;
  },

  createChatRoom: function(list, done) {
    log.info('createChatRoom');
    var url = "/cgi-bin/mmwebwx-bin/webwxcreatechatroom?r=" + ~new Date;

    list = cube.map(list, function(value) {
      return {UserName: value};
    });

    var data =  {
      MemberCount: list.length,
      MemberList: list,
    };

    this._request(url, data, 'POST', runtime.time_limit).then(function(e) {
      done(e);
    });
  },

  addMember: function(chatRoomName, list, done) {
    log.info('addMember');

    var url = "/cgi-bin/mmwebwx-bin/webwxupdatechatroom?fun=addmember";
    var data =  {
      ChatRoomName: chatRoomName,
      AddMemberList: list.join(','),
    };
    this._request(url, data, 'POST', runtime.time_limit).then(function(e) {
      done(e);
    });
  },

  deleteMember: function(chatRoomName, list, done) {
    log.info('deleteMember');

    var url = "/cgi-bin/mmwebwx-bin/webwxupdatechatroom?fun=delmember";
    var data =  {
      ChatRoomName: chatRoomName,
      DelMemberList: list.join(','),
    };
    this._request(url, data, 'POST', runtime.time_limit).then(function(e) {
      done(e);
    });
  },

  _request: function(url, data, method, delay) {

    method = method || 'POST';
    delay = delay || 1000;

    if (method == 'POST') {
      data['BaseRequest'] = this.getBaseRequest();
      data = JSON.stringify(data);
    }
    var uri = new cube.URI(url);
    url = uri.setQueryParam('lang', this.lang).toString();

    var deferred = Q.defer();
    $.ajax({
      type: method,
      url: url,
      data: data,
      contentType: "application/json; charset=utf-8",
      dataType: "json",
      success: function(ret) {

        log.debug("response: ", ret);

        var ret_code = 0;
        if (ret['BaseResponse'] && (ret_code = ret['BaseResponse']['Ret'])) {
          var message = ret['BaseResponse']['ErrMsg'];
          // readable error message
          if (message) {
            cube.fire('message', 'danger', message);
          } else {
            message = 'unknow_error';
          }
          log.error(message, ret);
          deferred.reject(new Error('request error'));
        } else {
          deferred.resolve(ret);
        }
      },
      error: function(ret) {
        log.error('request error: ', ret);
        deferred.reject(new Error('network error'));
      },
    });

    return deferred.promise.delay(delay);
  },

});

module.exports = WeChat;
