var style = require(__style_dir__ + '/app.scss');
import cube             from 'cube-js';

import Q                from 'q';
import log              from 'loglevel';
import S                from 'sprintf-js';

// just import it
import jqueryUI         from 'jquery-ui'

import i18n             from 'chrome/i18n.js'

import { runtime }      from 'wxhelper/config'
import template         from 'wxhelper/template.js'

var UI = function(controller) {
  this.controller = controller;
};

cube.mix(UI.prototype, {

  container: null,
  rightContainer: null,
  messageBox: null,
  menu_is_cloesd: false,
  toggleButton: null,

  events: {
    'click .dev_test': 'clickDevTest',
    'click .check_friend': 'clickCheckFriend',
    'click .clear_log': 'clickClearLog',
    'click .wxhelper_toggle': 'clickToggleButton',
  },

  clickDevTest: function() {
    if (!__is_dev__) {
      return;
    }
  },

  clickCheckFriend: function() {
    this.showMessage('info', i18n['doc_begin_check']);
    var time_limit = parseInt($('#time_limit').val()) || 30;
    runtime['time_limit'] = time_limit * 1000;
    this.controller.checkFriend();
  },

  clickClearLog: function() {
    this.messageBox.empty();
  },

  clickToggleButton: function() {
    var body = $('body');
    if (body.hasClass('wxhelper_inject_hide')) {
      this.menu_is_cloesd = false;
    } else {
      this.menu_is_cloesd = true;
    }
    var data = {'menu_is_cloesd': this.menu_is_cloesd};
    chrome.storage.local.set(data, function() {
    });
    this.updateMenuDisplay();
  },

  updateMenuDisplay: function() {
    var me = this;
    var body = $('body');

    var aniDone = function() {
      if (me.menu_is_cloesd) {
        body.addClass('wxhelper_inject_hide');
      } else {
        body.removeClass('wxhelper_inject_hide');
      }
    };

    var aniToggle = function() {
      var deferred = Q.defer();
      var right = 10;
      if (me.menu_is_cloesd) {
        right = -60;
      }
      me.toggleButton.animate({
        right: right
      }, 200, 'swing', deferred.resolve);
      return deferred.promise;
    };

    var aniMenu = function() {
      var deferred = Q.defer();
      var leftWidth = me.container.width() || 280;
      var leftOffset = 0;
      var rightWidth = 0;
      var rightOffset = 0;

      if (me.menu_is_cloesd) {
        leftOffset = -leftWidth;
        rightWidth = me.window_width;
        rightOffset = 0;
      } else {
        leftOffset = 0;
        rightWidth = me.window_width - leftWidth;
        rightOffset = leftWidth;
      }
      me.container.animate({
        left: leftOffset,
        width: leftWidth
      }, 200);

      me.rightContainer.animate({
        left: rightOffset,
        width: rightWidth
      }, 200, deferred.resolve);

      return deferred.promise;
    }

    if (me.menu_is_cloesd) {
      aniMenu().then(aniToggle).then(aniDone);
    } else {
      aniToggle().then(aniMenu).then(aniDone);
    }
  },

  init: function() {
    cube.on('unlogin', cube.bind(this.onUnlogin, this));
    cube.on('message', cube.bind(this.showMessage, this));
  },

  onUnlogin: function() {
    log.info('onUnlogin');
    this.showMessage('danger', i18n['doc_unlogin']);
  },

  /**
  * success, info, warning, danger
  */
  showMessage: function(type, message) {
    var data = {
      type: type,
      message: message
    }
    var message = $(template.renderHtml('message', data));

    this.messageBox.show().append(message);
    this.messageBox.scrollTop(this.messageBox[0].scrollHeight);
  },

  initView: function() {

    this.window_width = $(window).width();

    var data = {
      i18n: i18n,
      link: {
        author: 'https://github.com/liaohuqiu',
        github: 'https://github.com/liaohuqiu/wechat-helper',
      },
      version: chrome.runtime.getManifest().version,
    };

    this.container = $(template.renderHtml('content', data));
    $('body').prepend(this.container);

    this.messageBox = this.container.find('.message_box');
    this.toggleButton = this.container.find('.wxhelper_toggle');
    this.rightContainer = $('.wxhelper_inject_right');

    var me = this;
    chrome.storage.local.get('menu_is_cloesd', function(data) {
      me.menu_is_cloesd = data['menu_is_cloesd'];
      me.updateMenuDisplay();
    });

    this.container.resizable({
      handles: "e",
      resize: function(event, ui) {
        me.fitMenuAndContent();
      }
    });

    cube.bindEvents(this, this.events, this.container);
  },

  showOrHideLeft: function(show) {
  },

  fitMenuAndContent: function() {
    var width = this.container.width() || 280;
    var r = (width / this.window_width);
    if (r > 0.40) {
      r = 0.40;
    }

    var leftWidth = Math.floor(r * this.window_width);
    var rightOffset = leftWidth;
    var rightWidth = Math.floor((1 - r - 0.02) * this.window_width);

    this.container.css({
      width: leftWidth
    });
    this.rightContainer.css({
      left: rightOffset,
      width: rightWidth
    });
  },

  hackStyle: function() {
    if (__is_dev__) {
      $('<style>' + style + '</style>').appendTo('head')
    }
    $(document.body).addClass('wxhelper_inject');
    $(document.body).addClass('wxhelper_inject_hide');

    $('.main').addClass('wxhelper_inject_right');
    $('.login').addClass('wxhelper_inject_right');
  },

  renderThenShow: function() {

    this.init();

    this.hackStyle();

    this.initView();
  },
});

module.exports = UI;
